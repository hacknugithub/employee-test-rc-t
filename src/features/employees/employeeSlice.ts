import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { EmployeeSubmitForm, EmployeeType } from "../../types";
import { createEmployee } from "./employeesApi";

export interface EmployeesState {
  employees: Array<EmployeeType>;
}

const initialState: EmployeesState = {
  employees: [],
};

export const createEmployeeAsync = createAsyncThunk(
  "employee/createEmployee",
  async (payload: EmployeeSubmitForm) => {
    const response = await createEmployee(payload);
    return response;
  }
);

export const employeeSlice = createSlice({
  name: "employees",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getEmployees: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    },
    setEmployee: (state, action: PayloadAction<EmployeeType>) => {},
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createEmployeeAsync.fulfilled, (state, action) => {
        state.employees.push(action.payload);
      })
      .addCase(createEmployeeAsync.rejected, (state) => {
        console.log("Error");
      });
  },
});

export const { getEmployees, setEmployee } = employeeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectEmployees = (state: RootState) =>
  state.rootReducer.employees;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default employeeSlice.reducer;
